Question 4:
1. ? field(hit_transfer,engineering). 
true
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match. 
No match has been found.
It will use the following rule: field(X, Y) :- course(X, Z), field(Z, Y).
field(hit_transfer, engineering) :- course(hit_transfer, Z), field(Z, engineering). There is a call for a search through the database for course(hit_transfer, Z) and field(Z, engineering).
The database finds that course(hit_transfer, Z) and field (Z, engineering) has a match where 
Z is mechanical.

Hence if the course(hit_transfer, mechanical) and field(mechanical, engineering) are true, then field(hit_transfer, engineering) is true.

2. ? lab_number(fine_arts,X). 
X = 10;
false
non-grounded query.

Looks in the database from the beginning until the end, line by line, for a match. 
There is a match with lab_number(fine_arts, 10). where X = 10.

3. ? field(computer, literature). 
false
grounded query

Looks in the database from the beginning until the end, line by line, for a match. 
There is a call using field(X, Y) :- course(X, Z), field(Z, Y). field(computer, literature) :- course(computer, Z), field(Z, literature). There is no possible value of Z to make both terms true. Therefore, there are no possible matches. 
Even by using field(X, Y) :- course(X, Z), field(Z, Y).
	where course(computer, _) does not have a match
	and where field( _, literature) does not have a match either.
Therefore, if course(X,Z) or field(Z,Y) are false, field(computer, literature) is false.

4. ? course(X,Y). 
There are 6 pairs of answers: 
X = hit_transfer, Y = mechanical; 
X = web_design, Y = computer;
X = design_methods, Y = fine-arts,
X = poetry, Y = literature;
X = leadership, Y = management;
X = biology, Y = medicin.
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match. 
There are 6 possible matches under the course() statements because they are 6 course() facts in the database. 
The first match is for X = hit_transfer, Y = mechanical. If we continue the search, the next result is X = web_design, Y = computer. The third result is X = design_methods, Y = fine-arts. The fourth result is X = poetry, Y = literature. The fifth result is X = leadership, Y = management. The last result is X = biology, Y = medicin.

5. ? student(adrian). 
true
grounded query

Looks in the database from the beginning until the end, line by line, for a match. 
It will take the following statement: student(X):- student(X, _).
It will then find all possible matches where X is adrian who could study anything. It will match with the term student(adrian, web_design).
It will return that adrian is studying web_design.

6 ? student(anna, engineering). 
false
grounded query.

Looks in the database from the beginning until the end, line by line, for a match.
There is no match with any facts. It will use the following rule: student(X, Y) :- field(Z, Y), student(X, Z). statement. After the first unification, student(anna, engineering): - field(Z, engineering), student(anna, Z), it will look again in the database for a match starting with field(Z, engineering). The first result found is Z = mechanical

The search will proceed. field(mechanical,engineering) will be unified with field(X,Y) rule where X = mechanical and Y = engineering. There is another search for field(mechanical, engineering) :- course(mechanical, Z), field(Z, engineering). course(mechanical,Z) will be unified with course(hit_transfer, mechanical). Z will return as hit_transfer. Finally, the initial query becomes true because in the rule student(anna,engineering):- field(hit_transfer, engineering), student(anna,hit_transfer) are satisfied. It will then return false because no other result will be found.




7. ? student(X, engineering). 
X = anna;
X = daniel;
X = adrian;
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match. Unification with the rule student(X, Y):- field(Z, Y), student(X, Z) where Y is engineering. Will perform a search for the field(Z, engineering) and will find two values for Z = mechanical and Z = computer. No result will be found for a student that studies mechanical or computer. The search continues. 

Then it will be unified with the rule field(X, Y):- course(X, Z), field(Z, Y). field(Z, engineering):- course(Z, Z1), field(Z1, engineering) will perform a search and find that Z1 is mechanical. Then a search will be made for course(Z, mechanical) and it will be unified with course(hit_transfer, mechanical). Z = hit_transfer and it will go back to the base query to search for student(X, hit_transfer). A first value will be found X = anna. A second value will be found X = daniel. 

Then it will be unified with the rule field(X, Y):- course(X, Z), field(Z, Y). field(Z, engineering):- course(Z, Z1), field(Z1, engineering) will perform a search and find that Z1 = computer. Then a search will be made for course(Z, computer) and it will be unified with course(web_design, computer). Z = web_design and it will go back to the base query to search for student(X, web_design). A third value for X is found and X = adrian. 

The search will continue the search and find nothing therefore, it will return false.

8. ? student(X,fine-arts), course(fine_arts, Y). 
false
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match. It will try to unify the query with two conjunctive facts, The search will be unsuccessful because there is no unification possible with any of the facts in the database. The query will be false.


9. ? field(_,X). 
X = engineering;
X = engineering;
X = art;
X = social;
X = buisiness;
X = engineering;
X = engineering;
X = art;
X = social;
X = buisiness;
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match. It will look for any facts with the name field and return X. 5 possible values for X are returned. X = engineering, X = engineering, X = art, X = social and X - buisiness. 

field(_,X) will be unified with the rule field(X, Y) :- course(X, Z), field(Z, Y). A search will be done for field(_,X):- course (_,Z), field(Z,X). A match will be found for Z = mechanical and X = engineering. A second match will be found using this rule for Z = computer and X = engineering. A third match will be found using this rule for Z = fine-arts and X = art. A fourth match will be found using this rule for Z = literature and X = social. A last match will be found using this rule for Z = management and X = buisiness.

10. ? lab_number(_,X), field(X,Y). 
false
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match. It will try to unify the query with two conjunctive facts, The search will be unsuccessful because there is no unification possible with any of the facts in the database. The query will be false. 

11. ? lab_number(X,15), field(X,Y). 
X = mechanical,
Y = engineering;
X = hit_transfer,
Y = engineering;
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match. lab_number(X,15) will unify with the fact lab_number(mechanical, 15) where X = mechanical. field(mechanical, Y) will unify with the fact field(mechanical, engineering) where Y = engineering.

Then, lab_number(X, 15) will unify with the rule lab_number(X, Z) :- course(X, Y), lab_number(Y, Z). We will get lab_number(X, 15) :- course(X, Y), lab_number(Y, 15). lab_number(Y, 15) will unify with the fact lab_number(mechanical, 15) where Y = mechanical. From there, it will search for course(X, mechanical) and will unify with course(hit_transfer, mechanical) where X = hit_transfer. After finding X= hit_transfer, in the base query, field(X,Y) will look into the database for field(hit_transfer, Y) and find that Y = engineering. Finally, it will return false because no other results can be found.


12. ? student(X), !, student(X,_). % note to cut here 
X = anna;
X = anna;
false
non-grounded query 

Looks in the database from the beginning until the end, line by line, for a match. student(X) will unify with the rule student(X):- student(X,_). It will perform the search and find student(anna, hit_transfer) where X = anna. Then it will not backtrack because of the cut predicate. X will be applied to the clause student(X,_) and search the database. student(anna,_) will unify with student(anna, hit_transfer). It will return and instantiate X to anna. 

13. ? student(X), student(X,_), !. 
X = anna
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match.  student(X) will unify with the rule student(X):- student(X,_). It will perform the search and find student(anna, hit_transfer) where X = anna. After finding X = anna, it will stop the search because of the cut operation.

14. ? course(X,_), \+ student(_,X). % \+ is for negation (not)
X = biology
non-grounded query

Looks in the database from the beginning until the end, line by line, for a match. The first match is found for course(hit_transfer, mechanical) where X = hit_transfer. It will then search for the clause \+ student(_,X). There is no unification possible. The process will repeat itself for the first clause to find another match until it reaches course(biology, medicin). X is instantiated to biology. 
